/*PREDICTIVE MODELING WITH LINEAR REGRESSION*/

## Import Libraries and Load Data
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
​
# Load the dataset
data = pd.read_csv('recruitment_data.csv')
​
# Display the first few rows
data.head()

## Exploratory Data Analysis (EDA)
# Check for missing values
print(data.isnull().sum())
​
# Summary statistics
print(data.describe())

# Visualize distributions
sns.pairplot(data)
plt.show()

# Check correlations
plt.figure(figsize=(10, 8))
sns.heatmap(data.corr(), annot=True, cmap='coolwarm')
plt.show()

## Feature Selection
# Select features and target variable
X = data[['Age', 'EducationLevel', 'ExperienceYears', 'PreviousCompanies', 'DistanceFromCompany', 'InterviewScore', 'SkillScore', 'PersonalityScore']]
y = data['HiringDecision']

## Splitting Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

## Train the Linear Regression Model
# Initialize the model
model = LinearRegression()
​
# Train the model
model.fit(X_train, y_train)

## Model Evaluation
# Make predictions
y_pred = model.predict(X_test)
​
# Calculate performance metrics
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
​
print(f'Mean Squared Error: {mse}')
print(f'R-Squared: {r2}')

## Visualize the Regression Line and Predictions
# Scatter plot for actual vs predicted
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, color='blue')
plt.plot(y_test, y_test, color='red', linewidth=2)
plt.xlabel('Actual Values')
plt.ylabel('Predicted Values')
plt.title('Actual vs Predicted Values')
plt.show()
​
# Regression Coefficients
coefficients = pd.DataFrame(model.coef_, X.columns, columns=['Coefficient'])
print(coefficients)

# Save the predictions along with actual values
predictions_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})
predictions_df.to_csv('predictions.csv', index=False)

# Save the original dataset (for EDA and other charts)
data.to_csv('recruitment_data_with_predictions.csv', index=False)
